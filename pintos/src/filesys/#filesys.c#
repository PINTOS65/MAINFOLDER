#include "filesys/filesys.h"
#include <debug.h>
#include <stdio.h>
#include <string.h>
#include "filesys/file.h"
#include "filesys/free-map.h"
#include "filesys/inode.h"
//#include "filesys/directory.h" //already included in the header
#include "filesys/cache.h" //addition
#include "threads/palloc.h" //addition
#include "threads/thread.h" //addition

/* Partition that contains the file system. */
struct block *fs_device;

static void do_format (void);

/* Initializes the file system module.
   If FORMAT is true, reformats the file system. */
void
filesys_init (bool format) 
{
  fs_device = block_get_role (BLOCK_FILESYS);
  if (fs_device == NULL)
    PANIC ("No file system device found, can't initialize file system.");

  inode_init ();
  free_map_init ();

  if (format) 
    do_format ();

  free_map_open ();
}

/* Shuts down the file system module, writing any unwritten data
   to disk. */
void
filesys_done (void) 
{
  cache_flush ();
  free_map_close ();
}

/* Creates a file named NAME with the given INITIAL_SIZE.
   Returns true if successful, false otherwise.
   Fails if a file named NAME already exists,
   or if internal memory allocation fails. */
bool
filesys_create (const char *name, off_t initial_size) 
{
  block_sector_t inode_sector = 0;
  //struct dir *dir = dir_open_root ();

  struct dir* dir;
  bool is_dir;
  char parsed_name[NAME_MAX + 1];

  bool success = (filesys_parse (name, &dir, parsed_name, &is_dir) &&
			dir != NULL &&
			!is_dir &&
			free_map_allocate (1, &inode_sector) &&
			inode_create (inode_sector, initial_size) &&
			dir_add (dir, parsed_name, inode_sector));

  if (success) dir_entry_clear_dir (dir, inode_sector);

/*
  bool success = (dir != NULL
                  && free_map_allocate (1, &inode_sector)
                  && inode_create (inode_sector, initial_size)
                  && dir_add (dir, name, inode_sector));
*/
  if (!success && inode_sector != 0) 
    free_map_release (inode_sector, 1);
  dir_close (dir);

  return success;
}

/* Opens the file with the given NAME.
   Returns the new file if successful or a null pointer
   otherwise.
   Fails if no file named NAME exists,
   or if an internal memory allocation fails. */
void*
filesys_open (const char* name)
{
  bool dummy;
  return filesys_open_with_is_dir (name, &dummy);
}

void*
filesys_open_with_is_dir (const char *name, bool* is_dir)
{
  //struct dir *dir = dir_open_root ();
  struct inode *inode = NULL;

  bool dummy;
  struct dir* dir;
  char parsed_name[NAME_MAX + 1];

  if (filesys_parse (name, &dir, parsed_name, &dummy) && dir != NULL)
  {
    if (strlen (parsed_name) == 0) return dir;
    if (dir_lookup (dir, parsed_name, &inode))
      *is_dir = dir_entry_is_dir (dir, inode_get_inumber (inode));
    dir_close (dir);
    if (inode == NULL) printf("inode is NULL");
    printf("%d", !*is_dir &&dummy);
    if (inode == NULL || (!*is_dir && dummy))
      return NULL;
    else if (*is_dir)
      return dir_open (inode);
    else
      return file_open (inode);  }
  dir_close (dir);
  return NULL;

/*
  if (dir != NULL)
    dir_lookup (dir, name, &inode);
  dir_close (dir);
  return file_open (inode);
*/
}

/* Deletes the file named NAME.
   Returns true if successful, false on failure.
   Fails if no file named NAME exists,
   or if an internal memory allocation fails. */
bool
filesys_remove (const char *name) 
{
  struct dir* dir;
  bool is_dir;
  char parsed_name[NAME_MAX + 1];

  bool success = filesys_parse (name, &dir, parsed_name, &is_dir) &&
			dir != NULL &&
			dir_remove (dir, parsed_name);
  dir_close (dir);
  return success;

/*
  struct dir *dir = dir_open_root ();
  bool success = dir != NULL && dir_remove (dir, name);
  dir_close (dir); 

  return success;
*/
}

/* Formats the file system. */
static void
do_format (void)
{
  printf ("Formatting file system...");
  free_map_create ();
  if (!dir_create (ROOT_DIR_SECTOR, 16))
    PANIC ("root directory creation failed");
  free_map_close ();
  printf ("done.\n");
}

/* (addition) file path parsing */
bool
filesys_parse (const char* name_, struct dir** dir, char* dst, bool* is_dir)
{
  bool success = true;

  char* name = palloc_get_page (PAL_ASSERT | PAL_ZERO);
  memcpy (name, name_, strlen (name_));

  block_sector_t start = (name_[0] == '/') ? ROOT_DIR_SECTOR : thread_current ()->cur_dir;
  *dir = dir_open (inode_open (inode_get_parent (start)));
  char* dst_ptr = NULL;
  if (start != ROOT_DIR_SECTOR) dir_get_entry_name (*dir, start, &dst_ptr);

  struct inode* inode;
  struct dir* temp;

  char* token = name;
  printf("unparsing : %s \n", token);
  char* save_ptr;
  for (token = strtok_r (token, "/", &save_ptr);
	token != NULL;
	token = strtok_r (NULL, "/", &save_ptr))
  {
    printf("parsed : %s \n", token);
    if (!strcmp (token, ".."))
    {
      temp = *dir;
      *dir = dir_open (inode_open (inode_get_parent (inode_get_inumber (dir_get_inode (temp)))));

      if (inode_get_inumber (dir_get_inode (temp)) == ROOT_DIR_SECTOR)
        dst_ptr = NULL;
      else
        dir_get_entry_name (*dir, inode_get_inumber (dir_get_inode (temp)), &dst_ptr);

      inode_close (dir_get_inode (temp));
      dir_close (temp);
    }
    else if (!strcmp (token, "."))
    {
      continue;
    }
    else
    {
      if (dst_ptr == NULL)
        dst_ptr = token;
      else
      {
        if (!dir_lookup (*dir, dst_ptr, &inode))
        {
          success = false;
          break;
        }
        temp = *dir;
        *dir = dir_open (inode);
        inode_close (dir_get_inode (temp));
        dir_close (temp);
        dst_ptr = token;
      }
    }
  }

  if (success && dst_ptr != NULL) memcpy (dst, dst_ptr, NAME_MAX);
  else if (success) dst[0] = '\0';
  *is_dir = strlen (name_) > 0 && name_[strlen (name_) - 1] == '/';

  palloc_free_page (name);
  return success;
}
